#
# CMake Android Toolchain
#

# ANDROID_ABI must be set to one of these: 'armeabi-v7a', ''armeabi', 'x86' or 'mips'
IF (NOT DEFINED ANDROID_ABI)
  SET (ANDROID_ABI "x86")
ENDIF()
SET (ANDROID_PLATFORM "android-14")
SET (ANDROID_SDK_ROOT "/opt/android/sdk")
SET (ANDROID_NDK_ROOT "/opt/android/ndk")
SET (ANDROID_LLVM_VERSION "3.3")
SET (ANDROID_GCC_VERSION "4.8")
SET (ANDROID "True")

# detect current host platform
IF (CMAKE_HOST_APPLE)
  SET( TOOL_OS_SUFFIX "" )
  SET( ANDROID_HOST_SYSTEM_NAME_32 "darwin-x86" )
  SET( ANDROID_HOST_SYSTEM_NAME_64 "darwin-x86_64" )
ELSEIF (CMAKE_HOST_WIN32)
  SET( ANDROID_HOST_SYSTEM_NAME_32 "windows" )
  SET( ANDROID_HOST_SYSTEM_NAME_64 "windows-x86-64" )
  SET( TOOL_OS_SUFFIX ".exe" )
ELSEIF (CMAKE_HOST_UNIX)
  SET( TOOL_OS_SUFFIX "" )
  SET( ANDROID_HOST_SYSTEM_NAME_32 "linux-x86" )
  SET( ANDROID_HOST_SYSTEM_NAME_64 "linux-x86_64" )
ELSE()
  MESSAGE(FATAL_ERROR "Android compilation not supported on this platform")
ENDIF()

SET (CMAKE_SYSTEM_NAME Linux)
SET (CMAKE_SYSTEM_VERSION 1)
IF (${ANDROID_ABI} STREQUAL "armeabi")
  SET (CMAKE_SYSTEM_PROCESSOR "armv5te")
  SET (ANDROID_GCC_TOOLCHAIN_PREFIX "arm-linux-androideabi")
  SET (ANDROID_GCC_TOOLCHAIN "${ANDROID_GCC_TOOLCHAIN_PREFIX}-${ANDROID_GCC_VERSION}")
  SET (ANDROID_ARCH "arch-arm")
  SET (ANDROID_ARCH_C_FLAGS "-target armv5te-none-linux-androideabi -march=armv5te -mtune=xscale -msoft-float")
ELSEIF (${ANDROID_ABI} STREQUAL "armeabi-v7a")
  SET (CMAKE_SYSTEM_PROCESSOR "armv7")
  SET (ANDROID_GCC_TOOLCHAIN_PREFIX "arm-linux-androideabi")
  SET (ANDROID_GCC_TOOLCHAIN "${ANDROID_GCC_TOOLCHAIN_PREFIX}-${ANDROID_GCC_VERSION}")
  SET (ANDROID_ARCH "arch-arm")
  SET (ANDROID_ARCH_C_FLAGS "-target armv7-none-linux-androideabi -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16")
ELSEIF (${ANDROID_ABI} STREQUAL "x86")
  SET (CMAKE_SYSTEM_PROCESSOR "x86")
  SET (ANDROID_GCC_TOOLCHAIN_PREFIX "i686-linux-android")
  SET (ANDROID_GCC_TOOLCHAIN "x86-${ANDROID_GCC_VERSION}")
  SET (ANDROID_ARCH "arch-x86")
  SET (ANDROID_ARCH_C_FLAGS "-target i686-none-linux-android")
ELSEIF (${ANDROID_ABI} STREQUAL "mips")
  SET (CMAKE_SYSTEM_PROCESSOR "mips")
  SET (ANDROID_GCC_TOOLCHAIN_PREFIX "mipsel-linux-android")
  SET (ANDROID_GCC_TOOLCHAIN "${ANDROID_GCC_TOOLCHAIN_PREFIX}-${ANDROID_GCC_VERSION}")
  SET (ANDROID_ARCH "arch-mips")
  SET (ANDROID_ARCH_C_FLAGS "-target mipsel-none-linux-android")
ELSE ()
  MESSAGE(FATAL_ERROR "Unknown Android ABI: ${ANDROID_ABI}: Must be one of 'armeabi', 'armeabi-v7a', 'x86' or 'mips'")
ENDIF()

SET (ANDROID_LLVM_TOOLCHAIN "llvm-${ANDROID_LLVM_VERSION}")

SET (ANDROID_GCC_TOOLCHAIN_ROOT_32 "${ANDROID_NDK_ROOT}/toolchains/${ANDROID_GCC_TOOLCHAIN}/prebuilt/${ANDROID_HOST_SYSTEM_NAME_32}")
SET (ANDROID_GCC_TOOLCHAIN_ROOT_64 "${ANDROID_NDK_ROOT}/toolchains/${ANDROID_GCC_TOOLCHAIN}/prebuilt/${ANDROID_HOST_SYSTEM_NAME_64}")
SET (ANDROID_LLVM_TOOLCHAIN_ROOT_32 "${ANDROID_NDK_ROOT}/toolchains/${ANDROID_LLVM_TOOLCHAIN}/prebuilt/${ANDROID_HOST_SYSTEM_NAME_32}")
SET (ANDROID_LLVM_TOOLCHAIN_ROOT_64 "${ANDROID_NDK_ROOT}/toolchains/${ANDROID_LLVM_TOOLCHAIN}/prebuilt/${ANDROID_HOST_SYSTEM_NAME_64}")

IF (EXISTS "${ANDROID_GCC_TOOLCHAIN_ROOT_32}/")
  SET (ANDROID_HOST_SYSTEM_NAME ${ANDROID_HOST_SYSTEM_NAME_32})
  SET (ANDROID_LLVM_TOOLCHAIN_ROOT ${ANDROID_LLVM_TOOLCHAIN_ROOT_32})
  SET (ANDROID_GCC_TOOLCHAIN_ROOT ${ANDROID_GCC_TOOLCHAIN_ROOT_32})
ELSEIF (EXISTS "${ANDROID_GCC_TOOLCHAIN_ROOT_64}/")
  SET (ANDROID_HOST_SYSTEM_NAME ${ANDROID_HOST_SYSTEM_NAME_64})
  SET (ANDROID_LLVM_TOOLCHAIN_ROOT ${ANDROID_LLVM_TOOLCHAIN_ROOT_64})
  SET (ANDROID_GCC_TOOLCHAIN_ROOT ${ANDROID_GCC_TOOLCHAIN_ROOT_64})
ELSE()
  MESSAGE(FATAL_ERROR "Can't find Android NDK host toolchain directory")
ENDIF()

SET (ANDROID_SYSROOT "${ANDROID_NDK_ROOT}/platforms/${ANDROID_PLATFORM}/${ANDROID_ARCH}")

# export directories
SET( ANDROID_SYSTEM_INCLUDE_DIRS "")
SET( ANDROID_SYSTEM_LIB_DIRS "")

LIST( APPEND ANDROID_SYSTEM_INCLUDE_DIRS "${ANDROID_SYSROOT}/usr/include")
LIST( APPEND ANDROID_SYSTEM_INCLUDE_DIRS "${ANDROID_NDK_ROOT}/sources/cxx-stl/gnu-libstdc++/${ANDROID_GCC_VERSION}/include")
LIST( APPEND ANDROID_SYSTEM_INCLUDE_DIRS "${ANDROID_NDK_ROOT}/sources/cxx-stl/gnu-libstdc++/${ANDROID_GCC_VERSION}/libs/${ANDROID_ABI}/include")

LIST( APPEND ANDROID_SYSTEM_LIB_DIRS "${ANDROID_NDK_ROOT}/platforms/${ANDROID_PLATFORM}/${ANDROID_ARCH}/usr/lib")
LIST( APPEND ANDROID_SYSTEM_LIB_DIRS "${ANDROID_NDK_ROOT}/sources/cxx-stl/gnu-libstdc++/${ANDROID_GCC_VERSION}/libs/${ANDROID_ABI}")

ADD_DEFINITIONS( -DANDROID )
INCLUDE_DIRECTORIES( SYSTEM ${ANDROID_SYSTEM_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${ANDROID_SYSTEM_LIB_DIRS} )

SET (ANDROID_C_FLAGS "-gcc-toolchain ${ANDROID_GCC_TOOLCHAIN_ROOT} ${ANDROID_ARCH_C_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes -fomit-frame-pointer -fstrict-aliasing")

SET (ANDROID_CXX_FLAGS "${ANDROID_C_FLAGS} --sysroot=${ANDROID_SYSROOT} -fexceptions -frtti")

SET (ANDROID_LINKER_FLAGS "-Wl,--no-undefined")
IF (${ANDROID_ABI} STREQUAL "armeabi-v7a")
  SET (ANDROID_LINKER_FLAGS "-Wl,--fix-cortex-a8 ${ANDROID_LINKER_FLAGS}")
ENDIF()

SET (CMAKE_STRIP                    "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-strip${TOOL_OS_SUFFIX}" CACHE PATH "strip")
SET (CMAKE_AR                       "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-ar${TOOL_OS_SUFFIX}" CACHE PATH "archive")
SET (CMAKE_LINKER                   "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-ld${TOOL_OS_SUFFIX}" CACHE PATH "linker")
SET (CMAKE_NM                       "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-nm${TOOL_OS_SUFFIX}" CACHE PATH "nm")
SET (CMAKE_OBJCOPY                  "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-objcopy${TOOL_OS_SUFFIX}" CACHE PATH "objcopy")
SET (CMAKE_OBJDUMP                  "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-objdump${TOOL_OS_SUFFIX}" CACHE PATH "objdump")
SET (CMAKE_RANLIB                   "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-ranlib${TOOL_OS_SUFFIX}" CACHE PATH "ranlib")

SET (CMAKE_C_COMPILER               "${ANDROID_LLVM_TOOLCHAIN_ROOT}/bin/clang${TOOL_OS_SUFFIX}" CACHE PATH "gcc")
SET (CMAKE_CXX_COMPILER             "${ANDROID_LLVM_TOOLCHAIN_ROOT}/bin/clang++${TOOL_OS_SUFFIX}" CACHE PATH "g++")
SET (CMAKE_ASM_COMPILER             "${ANDROID_GCC_TOOLCHAIN_ROOT}/bin/${ANDROID_GCC_TOOLCHAIN_PREFIX}-gcc${TOOL_OS_SUFFIX}" CACHE PATH "Assembler")

SET (CMAKE_SHARED_LINKER_FLAGS      "${ANDROID_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS}" CACHE STRING "linker flags")
SET (CMAKE_MODULE_LINKER_FLAGS      "${ANDROID_LINKER_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS}" CACHE STRING "linker flags")
SET (CMAKE_EXE_LINKER_FLAGS         "${ANDROID_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}" CACHE STRING "linker flags")

SET (CMAKE_C_FLAGS                  "${ANDROID_C_FLAGS} -Wall -std=c99" CACHE STRING "c flags")
SET (CMAKE_C_FLAGS_DEBUG            "-g -DDEBUG" CACHE STRING "c Debug flags")
SET (CMAKE_C_FLAGS_RELEASE          "-O3 -DNDEBUG" CACHE STRING "c Release flags")

SET (CMAKE_CXX_FLAGS                "${ANDROID_CXX_FLAGS} -Wall -std=gnu++0x" CACHE STRING "c++ flags")
SET (CMAKE_CXX_FLAGS_DEBUG          "-g -DDEBUG" CACHE STRING "c++ Debug flags")
SET (CMAKE_CXX_FLAGS_RELEASE        "-O3 -DNDEBUG" CACHE STRING "c++ Release flags")

# Force set compilers because standard identification works badly for us
include( CMakeForceCompiler )
CMAKE_FORCE_C_COMPILER( "${CMAKE_C_COMPILER}" GNU )
set( CMAKE_C_PLATFORM_ID Linux )
set( CMAKE_C_SIZEOF_DATA_PTR 4 )
set( CMAKE_C_HAS_ISYSROOT 1 )
set( CMAKE_C_COMPILER_ABI ELF )
CMAKE_FORCE_CXX_COMPILER( "${CMAKE_CXX_COMPILER}" GNU )
set( CMAKE_CXX_PLATFORM_ID Linux )
set( CMAKE_CXX_SIZEOF_DATA_PTR 4 )
set( CMAKE_CXX_HAS_ISYSROOT 1 )
set( CMAKE_CXX_COMPILER_ABI ELF )
# force ASM compiler (required for CMake < 2.8.5)
set( CMAKE_ASM_COMPILER_ID_RUN TRUE )
set( CMAKE_ASM_COMPILER_ID GNU )
set( CMAKE_ASM_COMPILER_WORKS TRUE )
set( CMAKE_ASM_COMPILER_FORCED TRUE )
set( CMAKE_COMPILER_IS_GNUASM 1)
