#
# CMake NaCl Toolchain
#

# NACL_ABI must be set to one of these: 'pnacl', 'nacl-x86', 'nacl-x86_64', 'nacl-arm'
IF (NOT DEFINED NACL_ABI)
  SET (NACL_ABI "pnacl")
ENDIF()
SET (NACL_SDK_ROOT "/opt/nacl_sdk")
SET (NACL_PLATFORM "pepper_39")
SET (NACL "True")

IF (CMAKE_HOST_APPLE)
  SET( TOOL_OS_SUFFIX "" )
  SET( NACL_HOST_SYSTEM_NAME "mac" )
ELSEIF (CMAKE_HOST_WIN32)
  SET( TOOL_OS_SUFFIX ".exe" )
  SET( NACL_HOST_SYSTEM_NAME "win" )
ELSEIF (CMAKE_HOST_UNIX)
  SET( TOOL_OS_SUFFIX "" )
  SET( NACL_HOST_SYSTEM_NAME "linux" )
ELSE()
  MESSAGE(FATAL_ERROR "NaCl compilation not supported on this platform")
ENDIF()

SET (NACL_ARM_NEWLIB_TOOLCHAIN_ROOT "${NACL_SDK_ROOT}/${NACL_PLATFORM}/toolchain/${NACL_HOST_SYSTEM_NAME}_arm_newlib")
SET (NACL_X86_NEWLIB_TOOLCHAIN_ROOT "${NACL_SDK_ROOT}/${NACL_PLATFORM}/toolchain/${NACL_HOST_SYSTEM_NAME}_x86_newlib")
SET (NACL_X86_PNACL_TOOLCHAIN_ROOT "${NACL_SDK_ROOT}/${NACL_PLATFORM}/toolchain/${NACL_HOST_SYSTEM_NAME}_pnacl")

SET (CMAKE_SYSTEM_NAME Linux)
SET (CMAKE_SYSTEM_VERSION 1)
IF (${NACL_ABI} STREQUAL "pnacl")
  SET (NACL_TOOLCHAIN_ROOT "${NACL_X86_PNACL_TOOLCHAIN_ROOT}")
  SET (NACL_TOOLCHAIN_PREFIX "pnacl")
  SET (NACL_LIB_ROOT "${NACL_SDK_ROOT}/${NACL_PLATFORM}/lib/pnacl")
ELSEIF (${NACL_ABI} STREQUAL "nacl-x86")
  SET (NACL_TOOLCHAIN_ROOT "${NACL_X86_NEWLIB_TOOLCHAIN_ROOT}")
  SET (NACL_TOOLCHAIN_PREFIX "i686-nacl")
  SET (NACL_LIB_ROOT "${NACL_SDK_ROOT}/${NACL_PLATFORM}/lib/newlib_x86_32")
ELSEIF (${NACL_ABI} STREQUAL "nacl-x86_64")
  SET (NACL_TOOLCHAIN_ROOT "${NACL_X86_NEWLIB_TOOLCHAIN_ROOT}")
  SET (NACL_TOOLCHAIN_PREFIX "x86_64-nacl")
  SET (NACL_LIB_ROOT "${NACL_SDK_ROOT}/${NACL_PLATFORM}/lib/newlib_x86_64")
ELSEIF (${NACL_ABI} STREQUAL "nacl-arm")
  SET (NACL_TOOLCHAIN_ROOT "${NACL_ARM_NEWLIB_TOOLCHAIN_ROOT}")
  SET (NACL_TOOLCHAIN_PREFIX "arm-nacl")
  SET (NACL_LIB_ROOT "${NACL_SDK_ROOT}/${NACL_PLATFORM}/lib/newlib_arm")
ELSE()
  MESSAGE(FATAL_ERROR "Unknown NaCl ABI: ${NACL_ABI}: Must be one of 'pnacl', 'nacl-x86', 'nacl-x86_64', 'nacl-arm'")
ENDIF()

IF (NOT EXISTS "${NACL_TOOLCHAIN_ROOT}")
  MESSAGE(FATAL_ERROR "Can't find NaCl SDK host toolchain directory")
ENDIF()

# export directories
SET( NACL_INCLUDE_DIRS "")
#SET( NACL_LINKER_FLAGS "")
#SET( NACL_LINKER_FLAGS_DEBUG "-L${NACL_LIB_ROOT}/Debug")
#SET( NACL_LINKER_FLAGS_RELEASE "-L${NACL_LIB_ROOT}/Release")

LIST( APPEND NACL_INCLUDE_DIRS "${NACL_SDK_ROOT}/${NACL_PLATFORM}/include")

IF (${NACL_ABI} STREQUAL "pnacl")
  LIST (APPEND NACL_INCLUDE_DIRS "${NACL_SDK_ROOT}/${NACL_PLATFORM}/include/pnacl")
ELSE()
  LIST (APPEND NACL_INCLUDE_DIRS "${NACL_SDK_ROOT}/${NACL_PLATFORM}/include/newlib")
ENDIF()

ADD_DEFINITIONS( -DNACL )
INCLUDE_DIRECTORIES( ${NACL_INCLUDE_DIRS} )
LINK_DIRECTORIES( "${NACL_LIB_ROOT}/Release")

SET (NACL_C_FLAGS "-pthread -fdata-sections -ffunction-sections -Wno-long-long")

SET (NACL_CXX_FLAGS "${NACL_C_FLAGS}")

SET (CMAKE_AR                       "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-ar${TOOL_OS_SUFFIX}" CACHE PATH "archive")
SET (CMAKE_NM                       "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-nm${TOOL_OS_SUFFIX}" CACHE PATH "nm")
SET (CMAKE_OBJCOPY                  "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-objcopy${TOOL_OS_SUFFIX}" CACHE PATH "objcopy")
SET (CMAKE_OBJDUMP                  "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-objdump${TOOL_OS_SUFFIX}" CACHE PATH "objdump")
SET (CMAKE_RANLIB                   "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-ranlib${TOOL_OS_SUFFIX}" CACHE PATH "ranlib")

IF (${NACL_ABI} STREQUAL "pnacl")
  SET (CMAKE_LINKER                   "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-clang++${TOOL_OS_SUFFIX}" CACHE PATH "linker")
  SET (CMAKE_STRIP                    "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-strip${TOOL_OS_SUFFIX}" CACHE PATH "strip")
  SET (PNACL_FINALIZE                 "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-finalize${TOOL_OS_SUFFIX}" CACHE PATH "pnacl finalize")
  SET (PNACL_TRANSLATE                "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-translate${TOOL_OS_SUFFIX}" CACHE PATH "pnacl translate")
  SET (CMAKE_C_COMPILER               "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-clang${TOOL_OS_SUFFIX}" CACHE PATH "gcc")
  SET (CMAKE_CXX_COMPILER             "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-clang++${TOOL_OS_SUFFIX}" CACHE PATH "g++")
  SET (CMAKE_ASM_COMPILER             "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-clang${TOOL_OS_SUFFIX}" CACHE PATH "Assembler")
ELSE()
  SET (CMAKE_LINKER                   "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-g++${TOOL_OS_SUFFIX}" CACHE PATH "linker")
  SET (CMAKE_STRIP                    "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-strip${TOOL_OS_SUFFIX}" CACHE PATH "strip")
  SET (CMAKE_C_COMPILER               "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-gcc${TOOL_OS_SUFFIX}" CACHE PATH "gcc")
  SET (CMAKE_CXX_COMPILER             "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-g++${TOOL_OS_SUFFIX}" CACHE PATH "g++")
  SET (CMAKE_ASM_COMPILER             "${NACL_TOOLCHAIN_ROOT}/bin/${NACL_TOOLCHAIN_PREFIX}-gcc${TOOL_OS_SUFFIX}" CACHE PATH "Assembler")
ENDIF()

SET (CMAKE_C_FLAGS                  "${NACL_C_FLAGS} -Wall -std=c99" CACHE STRING "c flags")
SET (CMAKE_C_FLAGS_DEBUG            "-O0 -g -DDEBUG -DNACL_SDK_DEBUG" CACHE STRING "c Debug flags")
SET (CMAKE_C_FLAGS_RELEASE          "-O3 -g -DNDEBUG" CACHE STRING "c Release flags")
SET (CMAKE_C_LINK_FLAGS             "-Wl,--as-needed" CACHE STRING " c Link flags")

SET (CMAKE_CXX_FLAGS                "${NACL_CXX_FLAGS} -Wall -std=gnu++11" CACHE STRING "c++ flags")
#SET (CMAKE_CXX_FLAGS                "${NACL_CXX_FLAGS} -Wall -std=gnu++11 -stdlib=libc++" CACHE STRING "c++ flags")
SET (CMAKE_CXX_FLAGS_DEBUG          "-O0 -g -DDEBUG -DNACL_SDK_DEBUG" CACHE STRING "c++ Debug flags")
SET (CMAKE_CXX_FLAGS_RELEASE        "-O3 -g -DNDEBUG" CACHE STRING "c++ Release flags")
SET (CMAKE_CXX_LINK_FLAGS           "-Wl,--as-needed" CACHE STRING " c Link flags")

# Force set compilers because standard identification works badly for us
include( CMakeForceCompiler )
CMAKE_FORCE_C_COMPILER( "${CMAKE_C_COMPILER}" GNU )
set( CMAKE_C_PLATFORM_ID Linux )
set( CMAKE_C_SIZEOF_DATA_PTR 4 )
set( CMAKE_C_HAS_ISYSROOT 1 )
set( CMAKE_C_COMPILER_ABI ELF )
CMAKE_FORCE_CXX_COMPILER( "${CMAKE_CXX_COMPILER}" GNU )
set( CMAKE_CXX_PLATFORM_ID Linux )
set( CMAKE_CXX_SIZEOF_DATA_PTR 4 )
set( CMAKE_CXX_HAS_ISYSROOT 1 )
set( CMAKE_CXX_COMPILER_ABI ELF )
# force ASM compiler (required for CMake < 2.8.5)
set( CMAKE_ASM_COMPILER_ID_RUN TRUE )
set( CMAKE_ASM_COMPILER_ID GNU )
set( CMAKE_ASM_COMPILER_WORKS TRUE )
set( CMAKE_ASM_COMPILER_FORCED TRUE )
set( CMAKE_COMPILER_IS_GNUASM 1)
